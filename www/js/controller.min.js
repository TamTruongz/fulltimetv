app.run(function ($rootScope) {
  var isDarkMode = localStorage.getItem("isDarkMode");
  if (isDarkMode !== null) {
    $rootScope.isDarkMode = JSON.parse(isDarkMode);
  } else {
    $rootScope.isDarkMode = true;
  }
  if ($rootScope.isDarkMode) {
    document.body.classList.add("dark-mode");
  }
});
app.run([
  "$rootScope",
  "$window",
  function ($rootScope, $window) {
    $rootScope.isButtonVisible = false;

    angular.element($window).bind("scroll", function () {
      $rootScope.isButtonVisible =
        ($window.pageYOffset ||
          document.documentElement.scrollTop ||
          document.body.scrollTop) > 350;
      $rootScope.$apply();
    });

    $rootScope.scrollToTop = function () {
      (function smoothscroll() {
        var currentScroll =
          $window.pageYOffset ||
          document.documentElement.scrollTop ||
          document.body.scrollTop;
        if (currentScroll > 0) {
          $window.requestAnimationFrame(smoothscroll);
          $window.scrollTo(0, 0);
        }
      })();
    };
  },
]);
app.factory("FetchMatchService", function ($http) {
  return {
    fetchDataMatch: function () {
      return $http
        .get("https://live.vebo.xyz/api/match/featured/mt")
        .then(function (response) {
          return response.data;
        })
        .catch(function (error) {
          console.log("Lỗi:", error);
          throw error;
        });
    },
  };
});
app.factory("FetchHighlightService", function ($http) {
  return {
    fetchDataHighlight: function (page) {
      var url = `https://live.vebo.xyz/api/news/vebotv/list/highlight/${page}`;

      return $http
        .get(url)
        .then(function (response) {
          return response.data;
        })
        .catch(function (error) {
          console.log("Lỗi:", error);
          throw error;
        });
    },
  };
});
app.factory("FetchFullMatchService", function ($http) {
  return {
    fetchDataFullMatch: function (page) {
      var url = `https://api.vebo.xyz/api/news/vebotv/list/xemlai/${page}`;
      return $http
        .get(url)
        .then(function (response) {
          return response.data;
        })
        .catch(function (error) {
          console.log("Lỗi:", error);
          throw error;
        });
    },
  };
});
app.factory("VideoHighlightService", function ($http) {
  return {
    DataVideoHighlight: function (id) {
      var url = `https://api.vebo.xyz/api/news/vebotv/detail/${id}`;
      return $http
        .get(url)
        .then(function (response) {
          return response.data;
        })
        .catch(function (error) {
          console.log("Lỗi:", error);
          throw error;
        });
    },
  };
});
app.factory("FetchMatchLiveService", function ($http) {
  return {
    fetchDataMatchLive: function () {
      return $http
        .get("https://live.vebo.xyz/api/match/live")
        .then(function (response) {
          return response.data;
        })
        .catch(function (error) {
          console.log("Lỗi:", error);
          throw error;
        });
    },
  };
});

app.factory("FormatDate", function () {
  return {
    FormatDate: function FormatDate(dateString) {
      const year = dateString.substring(0, 4);
      const month = dateString.substring(4, 6);
      const day = dateString.substring(6, 8);
      const date = new Date(`${year}-${month}-${day}`);
      const formattedDay = date.getDate();
      const formattedMonth = date.getMonth() + 1; // Tháng trong JavaScript bắt đầu từ 0, nên cộng thêm 1
      const formattedYear = date.getFullYear();
      const formattedDate = `${formattedDay}/${formattedMonth}/${formattedYear}`;
      return formattedDate;
    },
  };
});
app.factory("FormatTime", function () {
  return {
    formatTimestamp: function (timestamp) {
      const dateObj = new Date(timestamp);
      const hours = dateObj.getHours();
      const minutes = dateObj.getMinutes();
      const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
      const formattedTime = `${hours}:${formattedMinutes}`;
      return formattedTime;
    },
  };
});
app.controller(
  "HomeController",
  function ($scope, $rootScope, FetchMatchLiveService) {
    $scope.filterQuery = "";
    $scope.uniqueTournaments = [];
    $rootScope.filterValue = "";
    $rootScope.filterLive = function () {
      $rootScope.filterValue = $scope.filterQuery;
    };
    $scope.isLoading = true;
    FetchMatchLiveService.fetchDataMatchLive().then(function (data) {
      $scope.matches = data;
      $scope.MatchResult = [];
      $rootScope.$watch("filterValue", function (newFilterValue) {
        $scope.MatchResult = [];
        $scope.matches.data.forEach((match) => {
          if (match.match_status == "live") {
            var tournamentSlug = match.tournament.name;
            if (!$scope.uniqueTournaments.includes(tournamentSlug)) {
              $scope.uniqueTournaments.push(tournamentSlug);
            }
            if (
              match.tournament.name == newFilterValue &&
              newFilterValue !== ""
            ) {
              $scope.MatchResult.push(match);
            } else if (newFilterValue == "") {
              $scope.MatchResult.push(match);
            }
          }
        });

        const countMatchLiveSpan = document.querySelector(".count-live");
        countMatchLiveSpan.textContent = $scope.MatchResult.length;
      });
      $scope.isLoading = false;
    });
  }
);
app.controller(
  "CalendarController",
  function ($scope, $rootScope, FetchMatchService, FormatDate, FormatTime) {
    $scope.formatTime = function (time) {
      return FormatTime.formatTimestamp(time);
    };
    $scope.formatDate = function (dateString) {
      return FormatDate.FormatDate(dateString);
    };

    $scope.isLoading = true;
    $scope.matchesByTournament = {};
    $scope.listTournament = [];
    $scope.filterQuery = "";
    $rootScope.filterValue = "";
    $rootScope.filterLive = function () {
      $rootScope.filterValue = $scope.filterQuery;
    };

    FetchMatchService.fetchDataMatch().then(function (data) {
      $scope.matches = data;
      $scope.matchesByTournament = {};
      $scope.listTournament = [];
      $scope.countMatch = 0;

      $scope.matches.data.forEach((match) => {
        const tournament = match.tournament.name;
        if ($scope.listTournament.indexOf(tournament) === -1) {
          $scope.listTournament.push(tournament);
        }
      });

      $rootScope.$watch("filterValue", function (newFilterValue) {
        $scope.matchesByTournament = {};
        $scope.flag = true;
        $scope.countMatch = 0;
        $scope.matches.data.forEach((match) => {
          if (
            match.match_status != "finished" &&
            match.match_status != "delay" &&
            match.match_status != "canceled"
          ) {
            var tournament = match.tournament.name;
            if (!$scope.matchesByTournament.hasOwnProperty(tournament)) {
              $scope.matchesByTournament[tournament] = [];
            }
            if (tournament == newFilterValue || newFilterValue === "") {
              $scope.flag = false;
              $scope.matchesByTournament[tournament].push(match);
              $scope.countMatch++;
            }
          }
        });
        var countMatchSpan = document.querySelector(".count-match");
        countMatchSpan.textContent = $scope.countMatch;
      });
      $scope.isLoading = false;
    });
  }
);
app.controller(
  "LiveController",
  function ($scope, $routeParams, FormatDate, FormatTime) {
    const id = $routeParams.id || "";
    async function CheckDataApi(id) {
      const response = await fetch("https://live.vebo.xyz/api/match/live");
      const data = await response.json();
      const match = data.data.find((item) => item.id === id);
      if (!match) {
        const response = await fetch(
          "https://live.vebo.xyz/api/match/featured/mt"
        );
        const data = await response.json();
        const match = data.data.find((item) => item.id === id);
        result = match;
      } else {
        result = match;
      }
      return result;
    }
    let result;
    CheckDataApi(id)
      .then((data) => {
        match = data;
        getInfoLiveMatch(match);
        embedLiveStream(id, match);
      })
      .catch((error) => {
        console.error(error);
      });
    async function getInfoLiveMatch(match) {
      if (match) {
        const titleVideo = document.querySelector(".title-video");
        const nameMatchVideo = titleVideo.querySelector(".name-match-video");
        const datetimeVideo = titleVideo.querySelector(".datetime-video");
        const nameLeagueVideo = titleVideo.querySelector(".name-league-video");
        nameMatchVideo.textContent = match.home.name + " vs " + match.away.name;
        datetimeVideo.textContent =
          FormatTime.formatTimestamp(match.timestamp) +
          " - " +
          FormatDate.FormatDate(match.date);
        nameLeagueVideo.textContent = match.tournament.name;
      }
    }
    async function getLiveStreamLinks(id) {
      const apiUrl = `https://live.vebo.xyz/api/match/${id}/meta`;
      const apiResponse = await fetch(apiUrl);
      const result = await apiResponse.json();
      const data = result.data || {};
      const playUrls = data.play_urls || [];

      const ArrLink = playUrls.map((playUrl) => ({ ...playUrl }));
      return { playUrls, ArrLink };
    }
    async function embedLiveStream(id, match) {
      try {
        const iframe = document.querySelector("iframe");
        const { playUrls, ArrLink } = await getLiveStreamLinks(id);
        const firstUrl = playUrls[0]?.url || "";

        if (firstUrl) {
          iframe.src = `https://player.4shares.live/?link=${firstUrl}`;
          const selectBox = document.querySelector(".change-link");
          const select = document.createElement("select");
          selectBox.appendChild(select);
          ArrLink.forEach((link) => {
            const option = document.createElement("option");
            option.value = link.url;
            option.text = link.name;
            select.appendChild(option);
          });

          selectBox.addEventListener("change", (event) => {
            const newUrl = event.target.value;
            iframe.src = `https://player.4shares.live/?link=${newUrl}`;
            const selectedOption = ArrLink.find((link) => link.name === newUrl);
            if (selectedOption) {
              event.target.options[event.target.selectedIndex].text =
                selectedOption.quality;
            }
          });

          // Fullscreen
          const iframeContainer = document.querySelector("#liveStreamFrame");
          let isFullscreen = false;

          const fullscreenButton = document.createElement("button");
          fullscreenButton.classList.add("fullscreen_btn");
          fullscreenButton.innerHTML = "<i class='bx bx-fullscreen'></i>";

          fullscreenButton.addEventListener("click", () => {
            if (isFullscreen) {
              exitFullscreen();
              fullscreenButton.innerHTML = "<i class='bx bx-fullscreen'></i>";
            } else {
              enterFullscreen();
              fullscreenButton.innerHTML =
                "<i class='bx bx-exit-fullscreen'></i>";
            }
          });
          function enterFullscreen() {
            if (document.documentElement.requestFullscreen) {
              document.documentElement.requestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) {
              document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) {
              document.documentElement.webkitRequestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) {
              document.documentElement.msRequestFullscreen();
            }

            iframeContainer.classList.add("fullscreenContainer");

            var screenWidth =
              window.innerWidth || document.documentElement.clientWidth;
            var screenHeight =
              window.innerHeight || document.documentElement.clientHeight;
            var screenRatio = screenWidth / screenHeight;
            var targetRatio = 0.5;
            if (screenRatio < targetRatio) {
              iframe.classList.remove("fullscreen");
              iframe.classList.add("fullscreenOther");
            } else {
              iframe.classList.add("fullscreen");
              iframe.classList.remove("fullscreenOther");
            }
            isFullscreen = true;
          }
          function exitFullscreen() {
            if (document.exitFullscreen) {
              document.exitFullscreen();
            } else if (document.mozCancelFullScreen) {
              document.mozCancelFullScreen();
            } else if (document.webkitExitFullscreen) {
              document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) {
              document.msExitFullscreen();
            }

            iframeContainer.classList.remove("fullscreenContainer");
            iframe.classList.remove("fullscreen");
            iframe.classList.remove("fullscreenOther");
            isFullscreen = false;
          }
          iframeContainer.appendChild(fullscreenButton);
        } else {
          if (match.live_tracker) {
            const IframeLive = document.querySelector(".IframeLive");
            IframeLive.classList.remove("IframeLive");
            IframeLive.classList.add("IframeWeight");
            IframeLive.src = match.live_tracker;
          } else {
            if (match.live_tracker == undefined) {
              const liveStreamFrame =
                document.querySelector("#liveStreamFrame");
              liveStreamFrame.style = null;
              liveStreamFrame.classList.add("NoneInfolive");
              const textNone = document.createElement("h4");
              textNone.textContent = "Không có thông tin trận đấu ...";
              textNone.classList.add("textNone");
              liveStreamFrame.appendChild(textNone);
            }
          }
        }
      } catch (error) {
        console.error(error);
      }
    }
  }
);
app.controller("SettingController", function ($scope, $rootScope) {
  $scope.toggleDarkMode = function () {
    $rootScope.isDarkMode = !$rootScope.isDarkMode;
    localStorage.setItem("isDarkMode", JSON.stringify($rootScope.isDarkMode));
    if ($rootScope.isDarkMode) {
      document.body.classList.add("dark-mode");
    } else {
      document.body.classList.remove("dark-mode");
    }
  };
  $scope.getIcon = function () {
    return $rootScope.isDarkMode ? "bx bxs-moon" : "bx bxs-sun";
  };
  $scope.icon = $scope.getIcon();
});
app.controller(
  "SearchController",
  function (
    $scope,
    $rootScope,
    $location,
    FetchMatchService,
    FormatDate,
    FormatTime,
    FetchHighlightService,
    FetchFullMatchService
  ) {
    $rootScope.searchQuery = "";
    $scope.query = $location.search().query || "";
    $rootScope.results = [];
    $rootScope.resultsHL = [];
    $rootScope.resultsFM = [];

    $scope.formatTime = function (time) {
      return FormatTime.formatTimestamp(time);
    };
    $scope.formatDate = function (dateString) {
      return FormatDate.FormatDate(dateString);
    };
    $scope.search = function () {
      $rootScope.results = [];
      $rootScope.resultsHL = [];
      $rootScope.resultsFM = [];
      var query = $scope.searchQuery.toLowerCase();
      FetchMatchService.fetchDataMatch().then(function (data) {
        data.data.forEach((match) => {
          if (
            match.slug.toLowerCase().includes(query) ||
            match.tournament.unique_tournament.slug
              .toLowerCase()
              .includes(query) ||
            match.tournament.unique_tournament.name
              .toLowerCase()
              .includes(query) ||
            FormatDate.FormatDate(match.date).toLowerCase().includes(query) ||
            FormatTime.formatTimestamp(match.timestamp)
              .toLowerCase()
              .includes(query) ||
            match.name.toLowerCase().includes(query)
          ) {
            $rootScope.results.push(match);
          }
        });
      });
      FetchHighlightService.fetchDataHighlight(1).then(function (data) {
        $scope.PageLength = Math.ceil(data.data.total / data.data.limit);
        for (let page = 1; page <= $scope.PageLength; page++) {
          FetchHighlightService.fetchDataHighlight(page).then(function (data) {
            data.data.list.forEach((match) => {
              if (
                match.slug.toLowerCase().includes(query) ||
                match.name.toLowerCase().includes(query) ||
                match.link.toLowerCase().includes(query)
              ) {
                $rootScope.resultsHL.push(match);
              }
            });
          });
        }

        for (let page = 1; page <= $scope.PageLength; page++) {
            FetchFullMatchService.fetchDataFullMatch(page).then(function (data) {
              data.data.list.forEach((match) => {
                if (
                  match.slug.toLowerCase().includes(query) ||
                  match.name.toLowerCase().includes(query) ||
                  match.link.toLowerCase().includes(query)
                ) {
                  $rootScope.resultsFM.push(match);
                }
              });
            });
          }
      });

      $location.path("/search").search("query", $scope.searchQuery);
    };
  }
);
app.controller(
  "HighlightController",
  function ($scope, $rootScope, FetchHighlightService, $routeParams) {
    $scope.page = $routeParams.page || 1;
    $scope.limit = 12;
    $scope.prePage = $scope.page - 1;
    $scope.nextPage = parseInt($scope.page) + 1;
    $scope.total_pages = 0;
    $scope.isLoading = true;
    $scope.lastPage = 0;
    FetchHighlightService.fetchDataHighlight($scope.page).then(function (data) {
      $scope.ListHighlight = data;
      $scope.total_pages = Math.ceil(
        $scope.ListHighlight.data.total / $scope.ListHighlight.data.limit
      );
      $scope.pages = [];

      var startPage = Math.max(1, $scope.page - 2);
      var endPage = Math.min(startPage + 4, $scope.total_pages);

      for (var i = startPage; i <= endPage; i++) {
        $scope.pages.push(i);
      }
      $scope.isLoading = false;
    });
  }
);
app.controller(
  "PlayHLController",
  function ($scope, $rootScope, VideoHighlightService, $routeParams, $sce) {
    const id = $routeParams.id || "";
    $scope.url_hl = "";
    $scope.isLoading = false;
    VideoHighlightService.DataVideoHighlight(id).then(function (data) {
      $scope.DataHighlight = data;
      $scope.url_hl = $sce.trustAsResourceUrl(
        "https://player.4shares.live/?link=" +
          $scope.DataHighlight.data.video_url
      );

      let jid = "vbplayer";
      var url = $scope.DataHighlight.data.video_url;
      var model_id = "null";

      function buildStreamID(url, model_id) {
        const urlParser = new URL(url);
        return `${model_id}_${urlParser.pathname}`;
      }
      var player = jwplayer(jid);
      player.setup({
        sources: [{ file: url }],
        swarmId: buildStreamID(url, model_id),
        autostart: true,
        cast: {},
        preload: "auto",
        width: "100%",
        height: "100%",
        primary: "html5",
        withCredentials: false,
      });
      $scope.isLoading = false;
    });
  }
);
app.controller(
  "ReviewController",
  function ($scope, $rootScope, FetchFullMatchService, $routeParams) {
    $scope.page = $routeParams.page || 1;
    $scope.prePage = $scope.page - 1;
    $scope.nextPage = parseInt($scope.page) + 1;
    $scope.total_pages = 0;
    $scope.isLoading = true;
    $scope.limit = 12;
    FetchFullMatchService.fetchDataFullMatch($scope.page).then(function (data) {
      $scope.ListFullMatch = data;
      $scope.total_pages = Math.ceil(
        $scope.ListFullMatch.data.total / $scope.ListFullMatch.data.limit
      );
      $scope.pages = [];

      var startPage = Math.max(1, $scope.page - 2);
      var endPage = Math.min(startPage + 4, $scope.total_pages);

      for (var i = startPage; i <= endPage; i++) {
        $scope.pages.push(i);
      }
      $scope.isLoading = false;
    });
  }
);
